// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerCode.Model.Database;

namespace ServerCode.Migrations
{
    [DbContext(typeof(DatabaseHistoryContext))]
    [Migration("20190822120544_amateursport22h")]
    partial class amateursport22h
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ServerCode.Model.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExtraInformation");

                    b.Property<int>("Ranking");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("ServerCode.Model.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeRange");

                    b.Property<DateTime>("Date");

                    b.Property<string>("ExtraInformation");

                    b.Property<string>("ImageURL");

                    b.Property<int>("LevelUser");

                    b.Property<int>("SportType");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdvertisementsHistory");
                });

            modelBuilder.Entity("ServerCode.Model.Entity.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId")
                        .IsUnique();

                    b.ToTable("Forum");
                });

            modelBuilder.Entity("ServerCode.Model.Entity.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSendMessage");

                    b.Property<int>("ForumId");

                    b.Property<string>("OwnerId");

                    b.Property<string>("PostText");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("ServerCode.Model.Localization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId");

                    b.Property<string>("City");

                    b.Property<string>("Street");

                    b.Property<int>("StreetNumber");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId")
                        .IsUnique();

                    b.ToTable("Localization");
                });

            modelBuilder.Entity("ServerCode.Model.SportName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.Property<int>("Vaule");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SportName");
                });

            modelBuilder.Entity("ServerCode.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("Age");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("ImageURL");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ServerCode.Model.UserAdvertisement", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("AdvertisementId");

                    b.Property<int>("Id");

                    b.Property<string>("UserId1");

                    b.HasKey("UserId", "AdvertisementId");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserAdvertisementsHistory");
                });

            modelBuilder.Entity("ServerCode.Model.Achievement", b =>
                {
                    b.HasOne("ServerCode.Model.User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ServerCode.Model.Advertisement", b =>
                {
                    b.HasOne("ServerCode.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ServerCode.Model.Entity.Forum", b =>
                {
                    b.HasOne("ServerCode.Model.Advertisement")
                        .WithOne("Forum")
                        .HasForeignKey("ServerCode.Model.Entity.Forum", "AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServerCode.Model.Entity.Post", b =>
                {
                    b.HasOne("ServerCode.Model.Entity.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerCode.Model.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("ServerCode.Model.Localization", b =>
                {
                    b.HasOne("ServerCode.Model.Advertisement")
                        .WithOne("Localization")
                        .HasForeignKey("ServerCode.Model.Localization", "AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServerCode.Model.SportName", b =>
                {
                    b.HasOne("ServerCode.Model.User")
                        .WithMany("PrefferedSports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ServerCode.Model.UserAdvertisement", b =>
                {
                    b.HasOne("ServerCode.Model.Advertisement", "Advertisement")
                        .WithMany("EagerMembers")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerCode.Model.User", "User")
                        .WithMany("AdvertisementsAccepted")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerCode.Model.User")
                        .WithMany("OwnAdvertisements")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
